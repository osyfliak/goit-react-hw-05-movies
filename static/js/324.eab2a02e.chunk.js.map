{"version":3,"file":"static/js/324.eab2a02e.chunk.js","mappings":"oMAGaA,EAAW,SAAC,GAAY,IAAXC,EAAU,EAAVA,MAChBC,GAAWC,EAAAA,EAAAA,MACjB,OACI,wBACCF,EAAMG,KAAI,SAAAC,GAAI,OACb,yBACE,SAAC,KAAD,CAAMC,MAAO,CAAEC,KAAML,GAAYM,GAAE,kBAAaH,EAAKI,IAArD,SACGJ,EAAKK,SAFDL,EAAKI,GADD,KAStB,C,sICbYE,EAAU,SAAC,GAAc,IAAbC,EAAY,EAAZA,SACvB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAgBE,OACE,kBAAMC,UAAU,cAAcJ,SAPd,SAAAK,GACdA,EAAEC,iBACFN,EAASE,GALTC,EAAQ,GAOT,EAGD,WACA,iBAAKC,UAAU,WAAf,WACE,kBAAQA,UAAU,kBAAlB,oBACA,kBAAOG,KAAK,OAAOC,MAAON,EAAMO,SAlBb,SAAAJ,GACvB,IAAQG,EAAUH,EAAEK,OAAZF,MACRL,EAAQK,EACT,EAekEJ,UAAU,uCAEzE,gBAAKA,UAAU,WAAf,UACE,mBAAQG,KAAK,SAASH,UAAU,uBAAhC,wBAIP,E,0BCxBYO,EAAQ,WACnB,OAA0BV,EAAAA,EAAAA,UAAS,IAAnC,eAAOZ,EAAP,KAAcuB,EAAd,KACA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,KACMC,EAAQF,EAAOG,IAAI,MAAQ,IAEjCC,EAAAA,EAAAA,YAAU,WACR,GAAc,KAAVF,EAAJ,CAGA,IAAMG,EAAU,mCAAG,8GAEIC,EAAAA,EAAAA,GAAe,CAAEJ,MAAAA,EAAOK,KAAM,IAFlC,OAGa,KADtBC,EAFS,QAGNC,QAAQC,QACfC,EAAAA,OAAAA,QAAe,iBAGbH,EAAKC,QAAQC,QACfZ,EAASU,EAAKC,SARD,gDAWfG,QAAQC,IAAR,MACAF,EAAAA,OAAAA,QAAe,SAZA,yDAAH,qDAgBhBN,GAjBC,CAkBF,GAAE,CAACH,IAOJ,OACE,iCACE,SAACjB,EAAD,CAAWC,SAPM,SAAAK,GACnBO,EAAS,IACTG,EAAU,CAAEa,EAAGvB,GAChB,EAIsCP,MAAOT,EAAMS,SAChD,SAACV,EAAA,EAAD,CAAWC,MAAOA,MAGvB,C,sNC5CYwC,EAAU,kCAEjBC,EAAeC,EAAAA,EAAAA,OAAa,CAChCC,QAAS,gCACTlB,OAAQ,CACNmB,QAAS,sCAIAC,EAAgB,mCAAG,sGACPJ,EAAab,IAAI,sBADV,uBACtBK,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,qDAKhBF,EAAc,mCAAI,WAAMN,GAAN,yFACNgB,EAAab,IAAI,gBAAiB,CAAEH,OAAAA,IAD9B,uBACrBQ,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAJ,sDAKda,EAAe,mCAAI,WAAMtC,GAAN,yFACPiC,EAAab,IAAb,iBAA2BpB,IADpB,uBACtByB,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAJ,sDAKfc,EAAe,mCAAI,WAAMvC,GAAN,yFACPiC,EAAab,IAAb,iBAA2BpB,EAA3B,aADO,uBACtByB,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAJ,sDAKfe,EAAe,mCAAI,WAAMxC,GAAN,yFACPiC,EAAab,IAAb,iBAA2BpB,EAA3B,aADO,uBACtByB,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAJ,qD","sources":["components/MovieList/MovieList.jsx","components/SearchBar/SearchBar.jsx","page/Movie/Movie.jsx","services/movieAPI.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\"\nimport PropTypes from 'prop-types';\n\nexport const MovieList =({movie}) =>{\n    const location = useLocation();\n    return(\n        <ul>\n        {movie.map(item => (\n          <li key={item.id}>\n            <Link state={{ from: location }} to={`/movies/${item.id}`}>\n              {item.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    )\n}\n\nMovieList.propTypes = {\n    movie: PropTypes.array.isRequired\n}","import { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nexport const SearchBar=({onSubmit})=>{\n  const [form, setForm] = useState('');\n\n  const handleChangeForm = e => {\n    const { value } = e.target;\n    setForm(value);\n  }\n    const reset = () => {\n        setForm('');\n      };\n\n    const resetForm = e => {\n        e.preventDefault();\n        onSubmit(form);\n        reset();\n      };\n\n    return(\n      <form className=\"row g-3 m-3\" onSubmit={resetForm}>\n      <div className=\"col-auto\">\n        <label  className=\"visually-hidden\">Email</label>\n        <input type=\"text\" value={form} onChange={handleChangeForm}  className=\"form-control-plaintext border \"/>\n      </div>\n      <div className=\"col-auto\">\n        <button type=\"submit\" className=\"btn btn-primary mb-3\">Search</button>\n      </div>\n    </form>\n    )\n}\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired\n}\n","import { MovieList } from 'components/MovieList/MovieList';\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { Notify } from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieSearch } from 'services/movieAPI';\n\nexport const Movie = () => {\n  const [movie, setMovie] = useState([]);\n  const [params, setParams] = useSearchParams();\n  const query = params.get('q') || '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n    const fetchMovie = async () => {\n      try {\n        const data = await getMovieSearch({ query, page: 1 });\n        if (data.results.length === 0) {\n          Notify.failure('Nothing found');\n        }\n\n        if (data.results.length) {\n          setMovie(data.results);\n        }\n      } catch (error) {\n        console.log(error);\n        Notify.failure('Error');\n      }\n    };\n\n    fetchMovie();\n  }, [query]);\n\n  const handleSearch = e => {\n    setMovie([]);\n    setParams({ q: e });\n  };\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSearch} title={movie.title} />\n      <MovieList movie={movie} />\n    </>\n  );\n};\n","import axios from 'axios';\n\nexport const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst movieService = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '4bf39acf6ebeb7cbbfc54c4c8bc42fdc',\n  },\n});\n\nexport const getMovieTrending = async () => {\n  const { data } = await movieService.get('trending/movie/day');\n  return data;\n};\n\nexport const getMovieSearch  = async params => {\n  const { data } = await movieService.get('/search/movie', { params });\n  return data;\n};\n\nexport const getMovieDetails  = async id => {\n  const { data } = await movieService.get(`/movie/${id}` );\n  return data;\n};\n\nexport const getMovieCredits  = async id => {\n  const { data } = await movieService.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieReviews  = async id => {\n  const { data } = await movieService.get(`/movie/${id}/reviews`);\n  return data;\n};"],"names":["MovieList","movie","location","useLocation","map","item","state","from","to","id","title","SearchBar","onSubmit","useState","form","setForm","className","e","preventDefault","type","value","onChange","target","Movie","setMovie","useSearchParams","params","setParams","query","get","useEffect","fetchMovie","getMovieSearch","page","data","results","length","Notify","console","log","q","IMG_URL","movieService","axios","baseURL","api_key","getMovieTrending","getMovieDetails","getMovieCredits","getMovieReviews"],"sourceRoot":""}